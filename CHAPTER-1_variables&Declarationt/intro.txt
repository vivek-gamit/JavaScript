📦Chapter 1: Variables & Declarations
 (JavaScript – Learn Everything Series by Sheryians Coding School)
 🧠 What are Variables?
 Variables are containers that hold data.
 They help us store, reuse, and update information in JavaScript — from simple values like
 numbers to complex data like arrays and objects.
 Think of a variable as a box with a name on it. You can put something inside it (a value), and later
 check or change what's inside.
 In JavaScript, you create these boxes using keywords: 
var 
, 
let 
, or 
const 
.
 🧪 var, let, and const – Line-by-Line Comparison
 🧓 
var
 – Old and risky
 Scoped to functions, not blocks
 Can be redeclared and reassigned
 Hoisted to the top with 
js
 undefined
 value
 var score = 10;
 var score = 20; // OK
 🧑
 ‍
 💻 
let
 – Modern and safe
 Scoped to blocks (
 {} 
)
 1/36
28/06/2025, 15:10
 Complete JS Course Syllabus
 Can be reassigned but not redeclared
 Hoisted, but stays in the Temporal Dead Zone (TDZ)
 js
 let age = 25;
 age = 30;      
// ✅
 let age = 40;  // ❌
 Error (same block)
 🔐 
const
 – Constant values
 Scoped to blocks
 Cannot be reassigned or redeclared
 Value must be assigned at declaration
 TDZ applies here too
 js
 const PI = 3.14;
 PI = 3.14159; // ❌
 Error
 👉 But: If 
const
 holds an object/array, you can still change its contents:
 js
 const student = { name: "Riya" };
 student.name = "Priya";  // ✅
 OK
 student = {};            
// ❌
 Error
 🔥 Scope in Real Life
 Block Scope → Code inside 
{}
 like in loops, 
Function Scope → Code inside a function
 let
 and 
const
 follow block scope.
 if 
, etc.
 var
 ignores block scope — which leads to bugs.
 js
 2/36
28/06/2025, 15:10
 Complete JS Course Syllabus
 {
 }
 var x = 5;
 let y = 10;
 const z = 15;
 console.log(x); // ✅
 5
 console.log(y); // ❌
 ReferenceError
 console.log(z); // ❌
 ReferenceError
 🧨 Hoisting
 JavaScript prepares memory before running code.
 It moves all declarations to the top — this is called hoisting.
 But:
 var
 is hoisted and set to 
let
 and 
undefined
 const
 are hoisted but not initialized — so accessing them early gives
 ReferenceError
 js
 console.log(a); // undefined
 var a = 10;
 js
 console.log(b); // ❌
 ReferenceError
 let b = 20;
 ⚠ Common Confusions (JS Reality Checks)
 const
 doesn't make things fully constant. It protects the variable, not the value.
 var
 is outdated — it's better to use 
let
 and 
const 
.
 3/36
28/06/2025, 15:10
 Complete JS Course Syllabus
 let
 and 
const
 behave similarly, but 
planning to reassign.
 const
 gives more safety — use it when you're not
 🧠 Mindset Rule
 Use 
const
 by default. Use 
Avoid 
let
 only when you plan to change the value.
 var
 — it belongs to the past.
 🧪 Practice Zone
 1. Declare your name and city using 
const 
, and your age using 
2. Try this and observe the result:
 js
 let 
.
 let x = 5;
 let x = 10;
 3. Guess the output:
 js
 console.log(count);  
var count = 42;
 4. Create a 
const
 object and add a new key to it — does it work?
 5. Try accessing a 
let
 variable before declaring it — what error do you see?
 6. Change a 
const
 array by pushing a value. Will it throw an error?
